# GraphQL schema example
#
# https://gqlgen.com/getting-started/


scalar Time

type Query {
  tenants(id: ID): [Tenant!]!
  users(id: [ID!], sort: [UserSort!]): [User!]!
  containerTypes(id: ID): [ContainerType!]!
  componentTypes(id: ID): [ComponentType!]!
  containers(id: ID): [Container!]!
  components(id: ID): [Component!]!
  quantities(id: ID): [Quantity!]!
  quantityChanges(id: ID): [QuantityChange!]!
}

type Mutation {
  upsertTenant(input: NewTenant!): Tenant!
  upsertUser(input: NewUser!): User!
  upsertContainerType(input: NewContainerType!): ContainerType!
  upsertComponentType(input: NewComponentType!): ComponentType!
  upsertContainer(input: NewContainer!): Container!
  upsertComponent(input: NewComponent!): Component!
  upsertQuantity(input: NewQuantity!): Quantity!
}

type Tenant {
  id: ID!
  createdAt: Time!
  name: String!
  users: [User!]
  containerTypes: [ContainerType!]
  componentTypes: [ComponentType!]
}

input NewTenant {
  id: ID
  name: String!
}

type User {
  id: ID!
  tenant: Tenant!
  createdAt: Time!
  name: String!
}

input NewUser {
  id: ID
  tenantId: ID!
  name: String!
}

type ContainerType {
  id: ID!
  tenant: Tenant!
  createdAt: Time!
  description: String!
  containers: [Container!]
}

input NewContainerType{
  id: ID
  tenantId: ID!
  description: String!
}

type Container {
  id: ID!
  tenant: Tenant!
  parent: Container
  containerType: ContainerType!
  createdAt: Time!
  description: String!
  children: [Container!]
  quantities: [Quantity!]
}

input NewContainer {
  id: ID
  tenantId: ID!
  parentId: ID
  containerTypeId: ID!
  description: String!
}

type ComponentType {
  id: ID!
  tenant: Tenant!
  createdAt: Time!
  description: String!
  components: [Component!]
}

input NewComponentType {
  id: ID
  tenantId: ID!
  description: String!
}

type Component {
  id: ID!
  tenant: Tenant!
  createdAt: Time!
  componentType: ComponentType!
  description: String!
  quantities: [Quantity!]
}

input NewComponent {
  id: ID
  tenantId: ID!
  componentTypeId: ID!
  description: String!
}

type Quantity {
  id: ID!
  container: Container!
  component: Component!
  createdAt: Time!
  amount: Int!
}

input NewQuantity {
  id: ID
  containerId: ID!
  componentId: ID!
  amount: Int!
}

type QuantityChange {
  id: ID!
  quantity: Quantity!
  createdAt: Time!
  amount: Int!
}






enum SortOrder {
  ASC
  DESC
}

enum UserSortableField {
  tenantId
  createdAt
  name
}

input UserSort {
  field: UserSortableField
  order: SortOrder = ASC
}

